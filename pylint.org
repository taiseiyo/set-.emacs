* .el file を動かす為に必要なプログラム
- pylint(flylint.el)
  - sudo apt install pyflake3

#+begin_src python 
#!/usr/bin/env python3 
#
# Syntax checker invoked from flylint.el in Emacsen.
# Copyright (c) 2016-2018, Hiroyuki Ohsaki.
# All rights reserved.
#
# $Id: pylint,v 1.20 2019/06/01 03:56:40 ohsaki Exp $
#

import io
import sys
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

import re
import subprocess

from perlcompat import die, warn, getopts

def usage():
    die("usage: {} file".format(sys.argv[0]))

def python_lint(file, src_lines):
    """Check the syntax of the Python program FILE.  It is assumed that that
    contents of FILE are stored in SRC_LINES."""
    result = subprocess.run(['pyflakes3', file],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    lines = result.stdout.splitlines() + result.stderr.splitlines()
    for line in lines:
        m = re.match(r'(.+?):(\d+):\s*(.+)$', line.decode())
        if m:
            file, lineno, msg = m.group(1), int(m.group(2)), m.group(3)
            src_line = src_lines[lineno - 1]
            column = 0
            m = re.match(r"'(.+?)'", msg)
            if m:
                column = src_line.find(m.group(1))
            print('{}:{}:0: {}'.format(file, lineno, msg))
            print('  ' + src_line)
            print('  ' + ' ' * column + '^')

def perl_lint(file, src_lines):
    """Check the syntax of the Perl program FILE.  It is assumed that that
    contents of FILE are stored in SRC_LINES."""
    result = subprocess.run(['perl', '-I../lib', '-cw', file],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    for line in result.stderr.splitlines():
        m = re.match(r'(.+?) at (\S+) line (\d+), near "(.+)"$', line.decode())
        if m:
            msg, file, lineno, part = m.group(1), m.group(2), int(
                m.group(3)), m.group(4)
            src_line = src_lines[lineno - 1]
            column = src_line.find(part)
            print('{}:{}:{}: {}'.format(file, lineno, column, msg))
            print('  ' + src_line)
            print('  ' + ' ' * column + '^')
        m = re.match(r'(.+?) at (\S+) line (\d+)', line.decode())
        if m:
            msg, file, lineno = m.group(1), m.group(2), int(m.group(3))
            src_line = src_lines[lineno - 1]
            print('{}:{}:1: {}'.format(file, lineno, msg))
            print('  ' + src_line)
    # FIXME: sort error messages

def elisp_lint(file, src_lines):
    """Check the syntax of the Emacs Lisp program FILE.  It is assumed that that
    contents of FILE are stored in SRC_LINES."""
    ELISP_EXPR = """(add-to-list 'load-path (expand-file-name "~/lib/emacs"))"""
    result = subprocess.run([
        'emacs', '-Q', '--batch', '--eval', ELISP_EXPR, '--eval',
        '(byte-compile-file "{}")'.format(file)
    ],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    buf = result.stdout + result.stderr
    # join folded lines
    buf = re.sub(b'\n   ', b'', buf)
    for line in buf.splitlines():
        m = re.match(r'(.+?):(\d+):(\d+):(.+)$', line.decode())
        if m:
            file, lineno, column, msg = m.group(1), int(m.group(2)), int(
                m.group(3)), m.group(4)
            try:
                src_line = src_lines[lineno - 1]
                print('{}:{}:{}: {}'.format(file, lineno, column, msg))
                print('  ' + src_line)
                print('  ' + ' ' * column + '^')
            except IndexError:
                lineno = len(src_lines)
                print('{}:{}: {}'.format(file, lineno, msg))

def c_lint(file, src_lines):
    """Check syntax of the C source file FILE.  Contents in SRC_LINES are not
    used."""
    subprocess.run(['gcc', '-std=c99', '-fsyntax-only', '-I', '.', file])

def main():
    if not sys.argv[1:]:
        usage()
    file = sys.argv[1]

    # load source file
    src_lines = []
    with open(file, errors='ignore') as f:
        for line in f:
            src_lines.append(line.rstrip())

    if src_lines[0].find('python') >= 0:
        python_lint(file, src_lines)
    elif src_lines[0].find('perl') >= 0:
        perl_lint(file, src_lines)
    elif re.search(
            'emacs-lisp', src_lines[0], flags=re.I) or file.endswith('.el'):
        elisp_lint(file, src_lines)
    else:
        c_lint(file, src_lines)

if __name__ == "__main__":
    main()
#+end_src 
